{"version":3,"sources":["components/MapSwitcher/MapSwitcher.tsx","components/OfficialPlacemark/OfficialPlacemark.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MapSwitcher","React","data","content","onLoad","OFFICIAL_DATA_COLORS","fetchData","a","fetch","response","json","OfficialPlacemark","setData","then","fetchedData","geometry","properties","weight","recovered","color","deaths","active","balloonContent","cases","todayCases","todayDeaths","totalTests","options","hideIconOnBalloonOpen","iconLayout","iconPieChartRadius","iconPieChartCoreRadius","iconPieChartCoreFillStyle","iconPieChartStrokeStyle","iconPieChartStrokeWidth","iconPieChartCaptionMaxWidth","REGIONS","opacity","App","mapRef","createRef","onMapLoad","useCallback","ymaps","current","objectManager","ObjectManager","borders","load","lang","quality","result","console","log","features","map","feature","index","id","iso3166","fillColor","fillOpacity","strokeColor","strokeOpacity","regionObjects","Regions","region","cords","JSON","parse","geojson","coordinates","polygon","type","point","reverse","osmid","subregionRu","hintContent","add","geoObjects","instanceRef","className","width","height","defaultState","center","zoom","modules","float","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8nl1CAOaA,EACT,YAA4C,eACxC,IADuC,EAGdC,WAAe,WAHD,6BAKvC,OACI,eAAC,IAAD,CAASC,KAAM,CAAEC,QAAS,sBAA1B,UACI,cAAC,IAAD,CACID,KAAM,CAAEC,QAAS,8CAGjBC,OAAQ,eAOZ,cAAC,IAAD,CACIF,KAAM,CACFC,QAAS,8C,uBCN3BE,EACS,UADTA,EAEM,UAFNA,EAGM,UAINC,EAAS,uCAAG,4BAAAC,EAAA,sEACOC,MAFN,8DACD,cACVC,EADU,yBAGPA,EAASC,QAHF,2CAAH,qDAMFC,EACT,YAAwD,qBAC9BV,aAD6B,mBAC9CC,EAD8C,KACxCU,EADwC,KASnD,OANAX,aAAgB,WACZK,IAAYO,MAAK,SAACC,GACdF,EAAQE,QAEb,IAEEZ,EAGD,cAAC,IAAD,CACIa,SAAU,CAAC,UAAW,WACtBC,WAAY,CACRd,KAAM,CACF,CAACe,OAAQf,EAAKgB,UAAWC,MAAOd,GAChC,CAACY,OAAQf,EAAKkB,OAAQD,MAAOd,GAC7B,CAACY,OAAQf,EAAKmB,OAAQF,MAAOd,IAEjCiB,eAAe,8EAAD,OAAoBpB,EAAKqB,MAAzB,cAAoCrB,EAAKsB,WAAzC,kEAAqEtB,EAAKmB,OAA1E,2DAAgGnB,EAAKkB,OAArG,cAAiHlB,EAAKuB,YAAtH,gGAAwJvB,EAAKgB,UAA7J,gGAA6LhB,EAAKwB,WAAlM,cAAkNxB,EAAKwB,WAAvN,MAElBC,QAAS,CACLC,uBAAuB,EACvBC,WAAY,mBAEZC,mBAAoB,GAEpBC,uBAAwB,GAExBC,0BAA2B,UAE3BC,wBAAyB,UAEzBC,wBAAyB,EAEzBC,4BAA6B,OA3BvB,M,QC5BpBC,EAAU,CACZ,CACIjB,MAAO,UACPkB,QAAS,IAEb,CACIlB,MAAO,UACPkB,QAAS,IAEb,CACIlB,MAAO,UACPkB,QAAS,IAEb,CACIlB,MAAO,UACPkB,QAAS,IAEb,CACIlB,MAAO,UACPkB,QAAS,IAEb,CACIlB,MAAO,UACPkB,QAAS,IAEb,CACIlB,MAAO,UACPkB,QAAS,KAuIFC,MAnIf,WACI,IAAMC,EAAStC,IAAMuC,YAEjBC,EAAYxC,IAAMyC,aAAY,SAACC,GAC/B,GAAIJ,GAAUA,EAAOK,QAAS,CAC1B,IAAIC,EAAgB,IAAIF,EAAMG,cAC9BH,EAAMI,QACDC,KAAK,KAAM,CACRC,KAAM,KACNC,QAAS,IAEZrC,MAAK,SAASsC,GACXC,QAAQC,IAAIF,GACZA,EAAOG,SAAWH,EAAOG,SAASC,KAAI,SAASC,EAAcC,GAEzD,OAAO,2BACAD,GADP,IAEIE,GAAIF,EAAQxC,WAAW2C,QACvB3C,WAAW,2BACJwC,EAAQxC,YADL,IAENM,eAAgB,SAEpBK,QAAS,CACLiC,UAAWxB,EAAQqB,GAAOtC,MAC1B0C,YAAazB,EAAQqB,GAAOpB,QAC5ByB,YAAa,OACbC,cAAe,SAK3B,IAAIC,EAAgBC,EAAQV,KAAI,SAACW,EAAQT,GACrC,IAAIU,EAAQC,KAAKC,MAAMH,EAAOI,SAY9B,OAVAH,EAAMI,YAAcJ,EAAMI,YAAYhB,KAAI,SAACiB,GAKvC,MAJmB,YAAfL,EAAMM,OACND,EAAUA,EAAQ,IAGfA,EAAQjB,KAAI,SAACmB,GAChB,OAAOA,EAAMC,gBAId,CACHF,KAAM,UACNf,GAAIQ,EAAOU,MACX7D,SAAS,2BACFoD,GADC,IAEJM,KAAM,YAGV9C,QAAS,CACLiC,UAAWxB,EAAQ,GAAGjB,MACtB0C,YAAazB,EAAQ,GAAGC,QACxByB,YAAa,OACbC,cAAe,IAEnB/C,WAAY,CACRM,eAAgB4C,EAAOW,YACvBC,YAAaZ,EAAOW,iBAIhChC,EAAckC,IAAIf,GAGlBzB,EAAOK,QAAQoC,WAAWD,IAAIlC,SAG3C,CAACN,IAEN,OACI,cAAC,IAAD,UAGE,eAAC,IAAD,CACI0C,YAAa1C,EAEb2C,UAAU,MACVC,MAAM,OACNC,OAAO,OACPC,aAAc,CACVC,OAAQ,CAAC,MAAO,OAChBC,KAAM,GAGVnF,OAAQqC,EACR+C,QAAS,CAAC,UAAW,gBAAiB,YAAa,iBAAkB,oBAAqB,0BAA2B,uBAAwB,qCAAsC,kCAAmC,mBAZ1N,UAcI,cAAC,EAAD,IAEA,cAAC,EAAD,KAEC,EA+BD,cAAC,IAAD,CAAa7D,QAAS,CAAE8D,MAAO,eAnD7B,yCC5GCC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB/E,MAAK,YAAkD,IAA/CgF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.194a397f.chunk.js","sourcesContent":["import * as React from 'react';\nimport {ListBox, ListBoxItem} from 'react-yandex-maps';\n\nexport interface MapSwitcherProps {\n\n}\n\nexport const MapSwitcher: React.FC<MapSwitcherProps> =\n    function MapSwitcher({}: MapSwitcherProps) {\n        const regionsTypeRef = React.createRef<any>();\n        const citiesTypeRef = React.createRef<any>();\n        let [mapType, setType] = React.useState('regions');\n\n        return (\n            <ListBox data={{ content: 'Тип' }}>\n                <ListBoxItem\n                    data={{ content: 'Регионы' }}\n                    //state={{ selected: mapType === 'regions' }}\n                    //instanceRef={regionsTypeRef as any}\n                    onLoad={() => {\n                        // regionsTypeRef.current.events.add('click', () => {\n                        //     setType('regions');\n                        //     //citiesTypeRef.current.deselect();\n                        // });\n                    }}\n                />\n                <ListBoxItem\n                    data={{\n                        content: 'Города',\n                    }}\n                    //state={{ selected: mapType === 'cities' }}\n                    // instanceRef={citiesTypeRef as any}\n                    // onLoad={() => {\n                    //     citiesTypeRef.current.events.add('click', () => {\n                    //         setType('cities');\n                    //         //regionsTypeRef.current.deselect();\n                    //     });\n                    // }}\n                />\n            </ListBox>\n        );\n    };\n","import * as React from 'react';\nimport {Placemark} from 'react-yandex-maps';\n\nexport interface OfficialPlacemarkProps {\n\n}\n\ninterface PublicData {\n    country: string;\n    cases: number;\n    todayCases: number;\n    deaths: number;\n    todayDeaths: number;\n    recovered: number;\n    active: number;\n    critical: number;\n    casesPerOneMillion: number;\n    deathsPerOneMillion: number;\n    totalTests: number;\n    testsPerOneMillion: number;\n}\n\nconst OFFICIAL_DATA_COLORS = {\n    recovered: '#28a745',\n    deaths: '#dc3545',\n    active: '#ffc107',\n};\n\nconst PUBLIC_API = 'https://coronavirus-19-api.herokuapp.com/countries/belarus';\nconst fetchData = async (): Promise<PublicData> => {\n    let response = await fetch(PUBLIC_API);\n\n    return response.json();\n}\n\nexport const OfficialPlacemark: React.FC<OfficialPlacemarkProps> =\n    function OfficialPlacemark({}: OfficialPlacemarkProps) {\n        let [data, setData] = React.useState<PublicData>();\n\n        React.useEffect(() => {\n            fetchData().then((fetchedData) => {\n                setData(fetchedData);\n            });\n        }, []);\n\n        if (!data) return null;\n\n        return (\n            <Placemark\n                geometry={[53.931574, 27.623856]}\n                properties={{\n                    data: [\n                        {weight: data.recovered, color: OFFICIAL_DATA_COLORS.recovered},\n                        {weight: data.deaths, color: OFFICIAL_DATA_COLORS.deaths},\n                        {weight: data.active, color: OFFICIAL_DATA_COLORS.active},\n                    ],\n                    balloonContent: `Всего случаев: ${data.cases} (+${data.todayCases})<br>Активных: ${data.active}<br>Смертей: ${data.deaths} (+${data.todayDeaths})<br>Выздоровевших: ${data.recovered}<br>Сделано тестов: ${data.totalTests} (+${data.totalTests})`,\n                }}\n                options={{\n                    hideIconOnBalloonOpen: false,\n                    iconLayout: 'default#pieChart',\n                    // Радиус диаграммы в пикселях.\n                    iconPieChartRadius: 34,\n                    // Радиус центральной части макета.\n                    iconPieChartCoreRadius: 24,\n                    // Стиль заливки центральной части.\n                    iconPieChartCoreFillStyle: '#ffffff',\n                    // Cтиль линий-разделителей секторов и внешней обводки диаграммы.\n                    iconPieChartStrokeStyle: '#ffffff',\n                    // Ширина линий-разделителей секторов и внешней обводки диаграммы.\n                    iconPieChartStrokeWidth: 3,\n                    // Максимальная ширина подписи метки.\n                    iconPieChartCaptionMaxWidth: 200\n                }}\n            />\n        );\n    };\n","import React from 'react';\nimport {Clusterer, YMaps, Map, YMapsApi, Placemark, PlacemarkGeometry, ZoomControl} from 'react-yandex-maps';\nimport './App.css';\nimport {MapSwitcher} from 'components/MapSwitcher/MapSwitcher';\nimport {OfficialPlacemark} from 'components/OfficialPlacemark/OfficialPlacemark';\nimport Regions from './convertcsv.json';\n\n// COLORS\n// const COLORS = ['#f8da84', '#f3b45f', '#ee924f', '#e95b3b', '#d1352b', '#a2202c']\n\nconst points: PlacemarkGeometry[] = [\n    [53.931574, 27.623856],\n    [53.731574, 27.523856],\n    [53.801574, 27.723856],\n    [53.831574, 27.793856],\n];\n\nconst REGIONS = [\n    {\n        color: \"#ff001a\",\n        opacity: 0.1,\n    },\n    {\n        color: \"#ff001a\",\n        opacity: 0.2,\n    },\n    {\n        color: \"#ff001a\",\n        opacity: 0.3,\n    },\n    {\n        color: \"#ff001a\",\n        opacity: 0.4,\n    },\n    {\n        color: \"#ff001a\",\n        opacity: 0.5,\n    },\n    {\n        color: \"#ff001a\",\n        opacity: 0.6,\n    },\n    {\n        color: \"#ff001a\",\n        opacity: 0.7,\n    },\n];\n\nfunction App() {\n    const mapRef = React.createRef<any>();\n\n    let onMapLoad = React.useCallback((ymaps: YMapsApi) => {\n        if (mapRef && mapRef.current) {\n            var objectManager = new ymaps.ObjectManager();\n            ymaps.borders\n                .load(\"BY\", {\n                    lang: \"ru\",\n                    quality: 2\n                })\n                .then(function(result: any) {\n                    console.log(result);\n                    result.features = result.features.map(function(feature: any, index: number) {\n                        // Добавим ISO код региона в качестве feature.id для objectManager.\n                        return {\n                            ...feature,\n                            id: feature.properties.iso3166,\n                            properties: {\n                                ...feature.properties,\n                                balloonContent: 'test',\n                            },\n                            options: {\n                                fillColor: REGIONS[index].color,\n                                fillOpacity: REGIONS[index].opacity,\n                                strokeColor: \"#000\",\n                                strokeOpacity: 0.3\n                            },\n                        };\n                    });\n\n                    let regionObjects = Regions.map((region, index) => {\n                        let cords = JSON.parse(region.geojson);\n\n                        cords.coordinates = cords.coordinates.map((polygon: number[][][]) => {\n                            if (cords.type !== 'Polygon') {\n                                polygon = polygon[0] as any;\n                            }\n\n                            return polygon.map((point: number[][]) => {\n                                return point.reverse();\n                            });\n                        });\n\n                        return {\n                            type: 'Feature',\n                            id: region.osmid,\n                            geometry: {\n                                ...cords,\n                                type: 'Polygon',\n                                //fillRule: 'evenOdd',\n                            },\n                            options: {\n                                fillColor: REGIONS[0].color,\n                                fillOpacity: REGIONS[0].opacity,\n                                strokeColor: \"#000\",\n                                strokeOpacity: 0.3\n                            },\n                            properties: {\n                                balloonContent: region.subregionRu,\n                                hintContent: region.subregionRu,\n                            }\n                        };\n                    });\n                    objectManager.add(regionObjects);\n\n                    //objectManager.add(result);\n                    mapRef.current.geoObjects.add(objectManager);\n                });\n        }\n    }, [mapRef]);\n\n  return (\n      <YMaps\n          key=\"5361a2f0-a070-4194-bd64-9db3c31f80af\"\n      >\n        <Map\n            instanceRef={mapRef as any}\n\n            className=\"map\"\n            width=\"100%\"\n            height=\"100%\"\n            defaultState={{\n                center: [53.74, 27.63],\n                zoom: 7,\n            }}\n\n            onLoad={onMapLoad}\n            modules={[\"borders\", \"ObjectManager\", 'GeoObject', 'map.addon.hint', 'map.addon.balloon', 'geoObject.addon.balloon', 'geoObject.addon.hint', 'objectManager.addon.objectsBalloon', 'objectManager.addon.objectsHint', 'layout.PieChart']}\n        >\n            <MapSwitcher />\n\n            <OfficialPlacemark />\n\n            {false && (\n            <Clusterer\n                options={{\n                    //preset: 'islands#redClusterIcons',\n                    groupByCoordinates: false,\n                }}\n            >\n                {points.map((coordinates, index) => (\n                    <Placemark\n                        modules={[\"geoObject.addon.balloon\"]}\n                        key={index}\n                        geometry={coordinates}\n                        properties={{\n                            data: [\n                                {weight: 720, color: '#FFA002'},\n                                {weight: 420, color: '#880011'},\n                                {weight: 230, color: '#035201'},\n                                {weight: 120, color: '#002f55'},\n                            ],\n                            balloonContent: 'Текст',\n                        }}\n                        options={{\n                            hideIconOnBalloonOpen: false,\n                            iconLayout: 'default#pieChart',\n                            //preset: 'islands#redGardenCircleIcon', // islands#COLOR + NAME + CircleIcon\n                        }}\n                    />\n                ))}\n            </Clusterer>\n            )}\n\n            <ZoomControl options={{ float: 'right' }} />\n        </Map>\n      </YMaps>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}